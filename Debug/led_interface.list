
led_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d90  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002f24  08002f24  00012f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f34  08002f34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f3c  08002f3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f3c  08002f3c  00012f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  08002f50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08002f50  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c32  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001520  00000000  00000000  00028c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002a190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002ab28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f71  00000000  00000000  0002b418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a04f  00000000  00000000  00040389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cfa  00000000  00000000  0004a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d10d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  000d1124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002f0c 	.word	0x08002f0c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002f0c 	.word	0x08002f0c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <led_init>:
/* CORE INTERFACE FUNCTIONS */

/*
 * function to initialize led driver
 */
void led_init(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
	gpio_init();
 80004de:	f000 f8a3 	bl	8000628 <gpio_init>
	pwm_init();
 80004e2:	f000 f8a7 	bl	8000634 <pwm_init>
	for (int i=0; i< MAX_LEDS; i++) {
 80004e6:	2300      	movs	r3, #0
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	e009      	b.n	8000500 <led_init+0x28>
		set_LED(i, OFF);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 f80d 	bl	8000514 <set_LED>
	for (int i=0; i< MAX_LEDS; i++) {
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3301      	adds	r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b04      	cmp	r3, #4
 8000504:	ddf2      	ble.n	80004ec <led_init+0x14>
	}
	led_show();
 8000506:	f000 f8a3 	bl	8000650 <led_show>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <set_LED>:

void set_LED(uint8_t pos, uint32_t col) {
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
	LED_Data[pos][0] = pos;
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	4912      	ldr	r1, [pc, #72]	; (800056c <set_LED+0x58>)
 8000524:	79fa      	ldrb	r2, [r7, #7]
 8000526:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	LED_Data[pos][1] = (col>>16) & 0xFF;
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	0c1a      	lsrs	r2, r3, #16
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	b2d1      	uxtb	r1, r2
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <set_LED+0x58>)
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	4413      	add	r3, r2
 8000538:	460a      	mov	r2, r1
 800053a:	705a      	strb	r2, [r3, #1]
	LED_Data[pos][2] = (col>>8) & 0xFF;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	0a1a      	lsrs	r2, r3, #8
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	b2d1      	uxtb	r1, r2
 8000544:	4a09      	ldr	r2, [pc, #36]	; (800056c <set_LED+0x58>)
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4413      	add	r3, r2
 800054a:	460a      	mov	r2, r1
 800054c:	709a      	strb	r2, [r3, #2]
	LED_Data[pos][3] = col & 0xFF;
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	b2d1      	uxtb	r1, r2
 8000554:	4a05      	ldr	r2, [pc, #20]	; (800056c <set_LED+0x58>)
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4413      	add	r3, r2
 800055a:	460a      	mov	r2, r1
 800055c:	70da      	strb	r2, [r3, #3]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000028 	.word	0x20000028

08000570 <set_Brightness>:

/*
 * function to set all the Leds brightness.
 * range 0-100 values exceeding 100 are capped at full brightness
 */
void set_Brightness(uint8_t brightness) {
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	if (brightness>100) {
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b64      	cmp	r3, #100	; 0x64
 800057e:	d901      	bls.n	8000584 <set_Brightness+0x14>
		brightness=100;
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	71fb      	strb	r3, [r7, #7]
	}
	for (int i=0; i< MAX_LEDS; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	e03e      	b.n	8000608 <set_Brightness+0x98>
		LED_dimmed[i][1] = LED_Data[i][1]*(brightness/100);
 800058a:	4a24      	ldr	r2, [pc, #144]	; (800061c <set_Brightness+0xac>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	4413      	add	r3, r2
 8000592:	785a      	ldrb	r2, [r3, #1]
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	4922      	ldr	r1, [pc, #136]	; (8000620 <set_Brightness+0xb0>)
 8000598:	fba1 1303 	umull	r1, r3, r1, r3
 800059c:	095b      	lsrs	r3, r3, #5
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	fb12 f303 	smulbb	r3, r2, r3
 80005a4:	b2d9      	uxtb	r1, r3
 80005a6:	4a1f      	ldr	r2, [pc, #124]	; (8000624 <set_Brightness+0xb4>)
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	460a      	mov	r2, r1
 80005b0:	705a      	strb	r2, [r3, #1]
		LED_dimmed[i][2] = LED_Data[i][2]*(brightness/100);
 80005b2:	4a1a      	ldr	r2, [pc, #104]	; (800061c <set_Brightness+0xac>)
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	4413      	add	r3, r2
 80005ba:	789a      	ldrb	r2, [r3, #2]
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	4918      	ldr	r1, [pc, #96]	; (8000620 <set_Brightness+0xb0>)
 80005c0:	fba1 1303 	umull	r1, r3, r1, r3
 80005c4:	095b      	lsrs	r3, r3, #5
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	fb12 f303 	smulbb	r3, r2, r3
 80005cc:	b2d9      	uxtb	r1, r3
 80005ce:	4a15      	ldr	r2, [pc, #84]	; (8000624 <set_Brightness+0xb4>)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	460a      	mov	r2, r1
 80005d8:	709a      	strb	r2, [r3, #2]
		LED_dimmed[i][3] = LED_Data[i][3]*(brightness/100);
 80005da:	4a10      	ldr	r2, [pc, #64]	; (800061c <set_Brightness+0xac>)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	4413      	add	r3, r2
 80005e2:	78da      	ldrb	r2, [r3, #3]
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	490e      	ldr	r1, [pc, #56]	; (8000620 <set_Brightness+0xb0>)
 80005e8:	fba1 1303 	umull	r1, r3, r1, r3
 80005ec:	095b      	lsrs	r3, r3, #5
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	fb12 f303 	smulbb	r3, r2, r3
 80005f4:	b2d9      	uxtb	r1, r3
 80005f6:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <set_Brightness+0xb4>)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4413      	add	r3, r2
 80005fe:	460a      	mov	r2, r1
 8000600:	70da      	strb	r2, [r3, #3]
	for (int i=0; i< MAX_LEDS; i++) {
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	3301      	adds	r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	2b04      	cmp	r3, #4
 800060c:	ddbd      	ble.n	800058a <set_Brightness+0x1a>
	}
}
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	20000028 	.word	0x20000028
 8000620:	51eb851f 	.word	0x51eb851f
 8000624:	2000003c 	.word	0x2000003c

08000628 <gpio_init>:
 * function to write RGB values to peripherals depending on board used
 */
/*
 * function to initialize/enable boards gpio. board dependent
 */
void gpio_init(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 800062c:	f000 fc6c 	bl	8000f08 <MX_GPIO_Init>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <pwm_init>:

/*
 * function to initilialize pwm channels. board dependent
 */
void pwm_init(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 8000638:	f000 f97e 	bl	8000938 <MX_TIM1_Init>
	MX_TIM2_Init();
 800063c:	f000 fa34 	bl	8000aa8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000640:	f000 fabe 	bl	8000bc0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000644:	f000 fb48 	bl	8000cd8 <MX_TIM4_Init>
	MX_TIM5_Init();
 8000648:	f000 fbd2 	bl	8000df0 <MX_TIM5_Init>
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}

08000650 <led_show>:

void led_show(void) {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
	//stm32f4 boards
	for (int i=0; i< MAX_LEDS; i++) {
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	e091      	b.n	8000780 <led_show+0x130>
			switch (i){
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b04      	cmp	r3, #4
 8000660:	f200 808b 	bhi.w	800077a <led_show+0x12a>
 8000664:	a201      	add	r2, pc, #4	; (adr r2, 800066c <led_show+0x1c>)
 8000666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066a:	bf00      	nop
 800066c:	08000681 	.word	0x08000681
 8000670:	080006b3 	.word	0x080006b3
 8000674:	080006e5 	.word	0x080006e5
 8000678:	08000717 	.word	0x08000717
 800067c:	08000749 	.word	0x08000749
				case 0:
					htim1.Instance->CCR1 = LED_dimmed[i][1];
 8000680:	4a45      	ldr	r2, [pc, #276]	; (8000798 <led_show+0x148>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	4413      	add	r3, r2
 8000688:	785a      	ldrb	r2, [r3, #1]
 800068a:	4b44      	ldr	r3, [pc, #272]	; (800079c <led_show+0x14c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	635a      	str	r2, [r3, #52]	; 0x34
					htim1.Instance->CCR2 = LED_dimmed[i][2];
 8000690:	4a41      	ldr	r2, [pc, #260]	; (8000798 <led_show+0x148>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	789a      	ldrb	r2, [r3, #2]
 800069a:	4b40      	ldr	r3, [pc, #256]	; (800079c <led_show+0x14c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	639a      	str	r2, [r3, #56]	; 0x38
					htim1.Instance->CCR3 = LED_dimmed[i][3];
 80006a0:	4a3d      	ldr	r2, [pc, #244]	; (8000798 <led_show+0x148>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	78da      	ldrb	r2, [r3, #3]
 80006aa:	4b3c      	ldr	r3, [pc, #240]	; (800079c <led_show+0x14c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	63da      	str	r2, [r3, #60]	; 0x3c
					break;
 80006b0:	e063      	b.n	800077a <led_show+0x12a>
				case 1:
					htim2.Instance->CCR1 = LED_dimmed[i][1];
 80006b2:	4a39      	ldr	r2, [pc, #228]	; (8000798 <led_show+0x148>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	785a      	ldrb	r2, [r3, #1]
 80006bc:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <led_show+0x150>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
					htim2.Instance->CCR2 = LED_dimmed[i][2];
 80006c2:	4a35      	ldr	r2, [pc, #212]	; (8000798 <led_show+0x148>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	789a      	ldrb	r2, [r3, #2]
 80006cc:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <led_show+0x150>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	639a      	str	r2, [r3, #56]	; 0x38
					htim2.Instance->CCR3 = LED_dimmed[i][3];
 80006d2:	4a31      	ldr	r2, [pc, #196]	; (8000798 <led_show+0x148>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4413      	add	r3, r2
 80006da:	78da      	ldrb	r2, [r3, #3]
 80006dc:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <led_show+0x150>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	63da      	str	r2, [r3, #60]	; 0x3c
					break;
 80006e2:	e04a      	b.n	800077a <led_show+0x12a>
				case 2:
					htim3.Instance->CCR1 = LED_dimmed[i][1];
 80006e4:	4a2c      	ldr	r2, [pc, #176]	; (8000798 <led_show+0x148>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	785a      	ldrb	r2, [r3, #1]
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <led_show+0x154>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34
					htim3.Instance->CCR2 = LED_dimmed[i][2];
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <led_show+0x148>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	789a      	ldrb	r2, [r3, #2]
 80006fe:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <led_show+0x154>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	639a      	str	r2, [r3, #56]	; 0x38
					htim3.Instance->CCR3 = LED_dimmed[i][3];
 8000704:	4a24      	ldr	r2, [pc, #144]	; (8000798 <led_show+0x148>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	78da      	ldrb	r2, [r3, #3]
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <led_show+0x154>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	63da      	str	r2, [r3, #60]	; 0x3c
					break;
 8000714:	e031      	b.n	800077a <led_show+0x12a>
				case 3:
					htim4.Instance->CCR1 = LED_dimmed[i][1];
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <led_show+0x148>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	785a      	ldrb	r2, [r3, #1]
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <led_show+0x158>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	635a      	str	r2, [r3, #52]	; 0x34
					htim4.Instance->CCR2 = LED_dimmed[i][2];
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <led_show+0x148>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	789a      	ldrb	r2, [r3, #2]
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <led_show+0x158>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	639a      	str	r2, [r3, #56]	; 0x38
					htim4.Instance->CCR3 = LED_dimmed[i][3];
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <led_show+0x148>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	78da      	ldrb	r2, [r3, #3]
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <led_show+0x158>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	63da      	str	r2, [r3, #60]	; 0x3c
					break;
 8000746:	e018      	b.n	800077a <led_show+0x12a>
				case 4:
					htim5.Instance->CCR1 = LED_dimmed[i][1];
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <led_show+0x148>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	785a      	ldrb	r2, [r3, #1]
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <led_show+0x15c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	635a      	str	r2, [r3, #52]	; 0x34
					htim5.Instance->CCR2 = LED_dimmed[i][2];
 8000758:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <led_show+0x148>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	789a      	ldrb	r2, [r3, #2]
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <led_show+0x15c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	639a      	str	r2, [r3, #56]	; 0x38
					htim5.Instance->CCR3 = LED_dimmed[i][3];
 8000768:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <led_show+0x148>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4413      	add	r3, r2
 8000770:	78da      	ldrb	r2, [r3, #3]
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <led_show+0x15c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	63da      	str	r2, [r3, #60]	; 0x3c
					break;
 8000778:	bf00      	nop
	for (int i=0; i< MAX_LEDS; i++) {
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3301      	adds	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b04      	cmp	r3, #4
 8000784:	f77f af6a 	ble.w	800065c <led_show+0xc>
			}
	}

}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	2000003c 	.word	0x2000003c
 800079c:	20000050 	.word	0x20000050
 80007a0:	20000098 	.word	0x20000098
 80007a4:	200000e0 	.word	0x200000e0
 80007a8:	20000128 	.word	0x20000128
 80007ac:	20000170 	.word	0x20000170

080007b0 <main>:
/*
 * main function
 */

int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b4:	f000 fdec 	bl	8001390 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80007b8:	f000 f854 	bl	8000864 <SystemClock_Config>

  /* Initialize led peripherals. include gpio_init and timers init */
  led_init();
 80007bc:	f7ff fe8c 	bl	80004d8 <led_init>


  	/* Start TIM1 */
  	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 80007c0:	2100      	movs	r1, #0
 80007c2:	4826      	ldr	r0, [pc, #152]	; (800085c <main+0xac>)
 80007c4:	f001 fdb0 	bl	8002328 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 80007c8:	2104      	movs	r1, #4
 80007ca:	4824      	ldr	r0, [pc, #144]	; (800085c <main+0xac>)
 80007cc:	f001 fdac 	bl	8002328 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 80007d0:	2108      	movs	r1, #8
 80007d2:	4822      	ldr	r0, [pc, #136]	; (800085c <main+0xac>)
 80007d4:	f001 fda8 	bl	8002328 <HAL_TIM_PWM_Start>



  while (1)
  {
	  set_LED(0, RED); //red
 80007d8:	f46f 017f 	mvn.w	r1, #16711680	; 0xff0000
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff fe99 	bl	8000514 <set_LED>
	  led_show();
 80007e2:	f7ff ff35 	bl	8000650 <led_show>
	  HAL_Delay(1000);
 80007e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ea:	f000 fe43 	bl	8001474 <HAL_Delay>
	  set_Brightness(50);
 80007ee:	2032      	movs	r0, #50	; 0x32
 80007f0:	f7ff febe 	bl	8000570 <set_Brightness>
	  led_show();
 80007f4:	f7ff ff2c 	bl	8000650 <led_show>
	  set_LED(0, GREEN); //green
 80007f8:	f46f 417f 	mvn.w	r1, #65280	; 0xff00
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fe89 	bl	8000514 <set_LED>
	  led_show();
 8000802:	f7ff ff25 	bl	8000650 <led_show>
	  HAL_Delay(1000);
 8000806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080a:	f000 fe33 	bl	8001474 <HAL_Delay>
	  set_Brightness(25); //
 800080e:	2019      	movs	r0, #25
 8000810:	f7ff feae 	bl	8000570 <set_Brightness>
	  led_show();
 8000814:	f7ff ff1c 	bl	8000650 <led_show>
	  set_LED(0, BLUE); //blue
 8000818:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff fe79 	bl	8000514 <set_LED>
	  led_show();
 8000822:	f7ff ff15 	bl	8000650 <led_show>
	  HAL_Delay(1000);
 8000826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082a:	f000 fe23 	bl	8001474 <HAL_Delay>
	  set_Brightness(50);
 800082e:	2032      	movs	r0, #50	; 0x32
 8000830:	f7ff fe9e 	bl	8000570 <set_Brightness>
	  led_show();
 8000834:	f7ff ff0c 	bl	8000650 <led_show>
	  HAL_Delay(1000);
 8000838:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083c:	f000 fe1a 	bl	8001474 <HAL_Delay>
	  set_Brightness(120);
 8000840:	2078      	movs	r0, #120	; 0x78
 8000842:	f7ff fe95 	bl	8000570 <set_Brightness>
	  set_LED(0, 0xff0000ff); //yellow
 8000846:	4906      	ldr	r1, [pc, #24]	; (8000860 <main+0xb0>)
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff fe63 	bl	8000514 <set_LED>
	  led_show();
 800084e:	f7ff feff 	bl	8000650 <led_show>
	  HAL_Delay(1000);
 8000852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000856:	f000 fe0d 	bl	8001474 <HAL_Delay>
	  set_LED(0, RED); //red
 800085a:	e7bd      	b.n	80007d8 <main+0x28>
 800085c:	20000050 	.word	0x20000050
 8000860:	ff0000ff 	.word	0xff0000ff

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2230      	movs	r2, #48	; 0x30
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fb42 	bl	8002efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a27      	ldr	r2, [pc, #156]	; (8000930 <SystemClock_Config+0xcc>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <SystemClock_Config+0xcc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a20      	ldr	r2, [pc, #128]	; (8000934 <SystemClock_Config+0xd0>)
 80008b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <SystemClock_Config+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008d8:	2308      	movs	r3, #8
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80008dc:	2354      	movs	r3, #84	; 0x54
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 f84f 	bl	8001990 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008f8:	f000 fb2e 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2102      	movs	r1, #2
 8000918:	4618      	mov	r0, r3
 800091a:	f001 fab1 	bl	8001e80 <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000924:	f000 fb18 	bl	8000f58 <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3750      	adds	r7, #80	; 0x50
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b096      	sub	sp, #88	; 0x58
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2220      	movs	r2, #32
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f002 fac3 	bl	8002efc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000976:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <MX_TIM1_Init+0x168>)
 8000978:	4a4a      	ldr	r2, [pc, #296]	; (8000aa4 <MX_TIM1_Init+0x16c>)
 800097a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1292-1;
 800097c:	4b48      	ldr	r3, [pc, #288]	; (8000aa0 <MX_TIM1_Init+0x168>)
 800097e:	f240 520b 	movw	r2, #1291	; 0x50b
 8000982:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b46      	ldr	r3, [pc, #280]	; (8000aa0 <MX_TIM1_Init+0x168>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <MX_TIM1_Init+0x168>)
 800098c:	22fe      	movs	r2, #254	; 0xfe
 800098e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <MX_TIM1_Init+0x168>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000996:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <MX_TIM1_Init+0x168>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099c:	4b40      	ldr	r3, [pc, #256]	; (8000aa0 <MX_TIM1_Init+0x168>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009a2:	483f      	ldr	r0, [pc, #252]	; (8000aa0 <MX_TIM1_Init+0x168>)
 80009a4:	f001 fc18 	bl	80021d8 <HAL_TIM_Base_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009ae:	f000 fad3 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009bc:	4619      	mov	r1, r3
 80009be:	4838      	ldr	r0, [pc, #224]	; (8000aa0 <MX_TIM1_Init+0x168>)
 80009c0:	f001 fe24 	bl	800260c <HAL_TIM_ConfigClockSource>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009ca:	f000 fac5 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009ce:	4834      	ldr	r0, [pc, #208]	; (8000aa0 <MX_TIM1_Init+0x168>)
 80009d0:	f001 fc51 	bl	8002276 <HAL_TIM_PWM_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009da:	f000 fabd 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009ea:	4619      	mov	r1, r3
 80009ec:	482c      	ldr	r0, [pc, #176]	; (8000aa0 <MX_TIM1_Init+0x168>)
 80009ee:	f002 f9a1 	bl	8002d34 <HAL_TIMEx_MasterConfigSynchronization>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009f8:	f000 faae 	bl	8000f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fc:	2360      	movs	r3, #96	; 0x60
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4619      	mov	r1, r3
 8000a20:	481f      	ldr	r0, [pc, #124]	; (8000aa0 <MX_TIM1_Init+0x168>)
 8000a22:	f001 fd31 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a2c:	f000 fa94 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	2204      	movs	r2, #4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4819      	ldr	r0, [pc, #100]	; (8000aa0 <MX_TIM1_Init+0x168>)
 8000a3a:	f001 fd25 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000a44:	f000 fa88 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <MX_TIM1_Init+0x168>)
 8000a52:	f001 fd19 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a5c:	f000 fa7c 	bl	8000f58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <MX_TIM1_Init+0x168>)
 8000a84:	f002 f9c4 	bl	8002e10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000a8e:	f000 fa63 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a92:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <MX_TIM1_Init+0x168>)
 8000a94:	f000 fb06 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000a98:	bf00      	nop
 8000a9a:	3758      	adds	r7, #88	; 0x58
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000050 	.word	0x20000050
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	; 0x38
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
 8000ad4:	615a      	str	r2, [r3, #20]
 8000ad6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad8:	4b38      	ldr	r3, [pc, #224]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000ada:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ade:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1292-1;
 8000ae0:	4b36      	ldr	r3, [pc, #216]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000ae2:	f240 520b 	movw	r2, #1291	; 0x50b
 8000ae6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 8000aee:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000af0:	22fe      	movs	r2, #254	; 0xfe
 8000af2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af4:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b00:	482e      	ldr	r0, [pc, #184]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000b02:	f001 fb69 	bl	80021d8 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b0c:	f000 fa24 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4827      	ldr	r0, [pc, #156]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000b1e:	f001 fd75 	bl	800260c <HAL_TIM_ConfigClockSource>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b28:	f000 fa16 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b2c:	4823      	ldr	r0, [pc, #140]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000b2e:	f001 fba2 	bl	8002276 <HAL_TIM_PWM_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b38:	f000 fa0e 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481c      	ldr	r0, [pc, #112]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000b4c:	f002 f8f2 	bl	8002d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b56:	f000 f9ff 	bl	8000f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5a:	2360      	movs	r3, #96	; 0x60
 8000b5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4812      	ldr	r0, [pc, #72]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000b72:	f001 fc89 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000b7c:	f000 f9ec 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2204      	movs	r2, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000b88:	f001 fc7e 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000b92:	f000 f9e1 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2208      	movs	r2, #8
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000b9e:	f001 fc73 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000ba8:	f000 f9d6 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <MX_TIM2_Init+0x114>)
 8000bae:	f000 fa79 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000bb2:	bf00      	nop
 8000bb4:	3738      	adds	r7, #56	; 0x38
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000098 	.word	0x20000098

08000bc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	; 0x38
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	615a      	str	r2, [r3, #20]
 8000bee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bf0:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000bf2:	4a38      	ldr	r2, [pc, #224]	; (8000cd4 <MX_TIM3_Init+0x114>)
 8000bf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1292-1;
 8000bf6:	4b36      	ldr	r3, [pc, #216]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000bf8:	f240 520b 	movw	r2, #1291	; 0x50b
 8000bfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255-1;
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000c06:	22fe      	movs	r2, #254	; 0xfe
 8000c08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0a:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c16:	482e      	ldr	r0, [pc, #184]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000c18:	f001 fade 	bl	80021d8 <HAL_TIM_Base_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c22:	f000 f999 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000c34:	f001 fcea 	bl	800260c <HAL_TIM_ConfigClockSource>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c3e:	f000 f98b 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c42:	4823      	ldr	r0, [pc, #140]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000c44:	f001 fb17 	bl	8002276 <HAL_TIM_PWM_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c4e:	f000 f983 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481b      	ldr	r0, [pc, #108]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000c62:	f002 f867 	bl	8002d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c6c:	f000 f974 	bl	8000f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c70:	2360      	movs	r3, #96	; 0x60
 8000c72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2200      	movs	r2, #0
 8000c84:	4619      	mov	r1, r3
 8000c86:	4812      	ldr	r0, [pc, #72]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000c88:	f001 fbfe 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c92:	f000 f961 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2204      	movs	r2, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000c9e:	f001 fbf3 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000ca8:	f000 f956 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2208      	movs	r2, #8
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000cb4:	f001 fbe8 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000cbe:	f000 f94b 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cc2:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <MX_TIM3_Init+0x110>)
 8000cc4:	f000 f9ee 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000cc8:	bf00      	nop
 8000cca:	3738      	adds	r7, #56	; 0x38
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000e0 	.word	0x200000e0
 8000cd4:	40000400 	.word	0x40000400

08000cd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	; 0x38
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	615a      	str	r2, [r3, #20]
 8000d06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d08:	4b37      	ldr	r3, [pc, #220]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000d0a:	4a38      	ldr	r2, [pc, #224]	; (8000dec <MX_TIM4_Init+0x114>)
 8000d0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1292-1;
 8000d0e:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000d10:	f240 520b 	movw	r2, #1291	; 0x50b
 8000d14:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8000d1c:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000d1e:	22fe      	movs	r2, #254	; 0xfe
 8000d20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d28:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d2e:	482e      	ldr	r0, [pc, #184]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000d30:	f001 fa52 	bl	80021d8 <HAL_TIM_Base_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d3a:	f000 f90d 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4827      	ldr	r0, [pc, #156]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000d4c:	f001 fc5e 	bl	800260c <HAL_TIM_ConfigClockSource>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d56:	f000 f8ff 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d5a:	4823      	ldr	r0, [pc, #140]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000d5c:	f001 fa8b 	bl	8002276 <HAL_TIM_PWM_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d66:	f000 f8f7 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	4619      	mov	r1, r3
 8000d78:	481b      	ldr	r0, [pc, #108]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000d7a:	f001 ffdb 	bl	8002d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d84:	f000 f8e8 	bl	8000f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d88:	2360      	movs	r3, #96	; 0x60
 8000d8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4812      	ldr	r0, [pc, #72]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000da0:	f001 fb72 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000daa:	f000 f8d5 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2204      	movs	r2, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000db6:	f001 fb67 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000dc0:	f000 f8ca 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4807      	ldr	r0, [pc, #28]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000dcc:	f001 fb5c 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000dd6:	f000 f8bf 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dda:	4803      	ldr	r0, [pc, #12]	; (8000de8 <MX_TIM4_Init+0x110>)
 8000ddc:	f000 f962 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000de0:	bf00      	nop
 8000de2:	3738      	adds	r7, #56	; 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000128 	.word	0x20000128
 8000dec:	40000800 	.word	0x40000800

08000df0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08e      	sub	sp, #56	; 0x38
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	f107 0320 	add.w	r3, r7, #32
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	615a      	str	r2, [r3, #20]
 8000e1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e20:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000e22:	4a38      	ldr	r2, [pc, #224]	; (8000f04 <MX_TIM5_Init+0x114>)
 8000e24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1292-1;
 8000e26:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000e28:	f240 520b 	movw	r2, #1291	; 0x50b
 8000e2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2e:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255-1;
 8000e34:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000e36:	22fe      	movs	r2, #254	; 0xfe
 8000e38:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e40:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e46:	482e      	ldr	r0, [pc, #184]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000e48:	f001 f9c6 	bl	80021d8 <HAL_TIM_Base_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000e52:	f000 f881 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e60:	4619      	mov	r1, r3
 8000e62:	4827      	ldr	r0, [pc, #156]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000e64:	f001 fbd2 	bl	800260c <HAL_TIM_ConfigClockSource>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000e6e:	f000 f873 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e72:	4823      	ldr	r0, [pc, #140]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000e74:	f001 f9ff 	bl	8002276 <HAL_TIM_PWM_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000e7e:	f000 f86b 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e8a:	f107 0320 	add.w	r3, r7, #32
 8000e8e:	4619      	mov	r1, r3
 8000e90:	481b      	ldr	r0, [pc, #108]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000e92:	f001 ff4f 	bl	8002d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000e9c:	f000 f85c 	bl	8000f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea0:	2360      	movs	r3, #96	; 0x60
 8000ea2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4812      	ldr	r0, [pc, #72]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000eb8:	f001 fae6 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000ec2:	f000 f849 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2204      	movs	r2, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000ece:	f001 fadb 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8000ed8:	f000 f83e 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2208      	movs	r2, #8
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000ee4:	f001 fad0 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 8000eee:	f000 f833 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_TIM5_Init+0x110>)
 8000ef4:	f000 f8d6 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000ef8:	bf00      	nop
 8000efa:	3738      	adds	r7, #56	; 0x38
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000170 	.word	0x20000170
 8000f04:	40000c00 	.word	0x40000c00

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_GPIO_Init+0x4c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <MX_GPIO_Init+0x4c>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <MX_GPIO_Init+0x4c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_GPIO_Init+0x4c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <MX_GPIO_Init+0x4c>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_GPIO_Init+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a33      	ldr	r2, [pc, #204]	; (8001090 <HAL_TIM_Base_MspInit+0xdc>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10e      	bne.n	8000fe4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	4a31      	ldr	r2, [pc, #196]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000fe2:	e04e      	b.n	8001082 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fec:	d10e      	bne.n	800100c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a27      	ldr	r2, [pc, #156]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b25      	ldr	r3, [pc, #148]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	69bb      	ldr	r3, [r7, #24]
}
 800100a:	e03a      	b.n	8001082 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <HAL_TIM_Base_MspInit+0xe4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10e      	bne.n	8001034 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697b      	ldr	r3, [r7, #20]
}
 8001032:	e026      	b.n	8001082 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a18      	ldr	r2, [pc, #96]	; (800109c <HAL_TIM_Base_MspInit+0xe8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10e      	bne.n	800105c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a13      	ldr	r2, [pc, #76]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
}
 800105a:	e012      	b.n	8001082 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <HAL_TIM_Base_MspInit+0xec>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d10d      	bne.n	8001082 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a09      	ldr	r2, [pc, #36]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_TIM_Base_MspInit+0xe0>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
}
 8001082:	bf00      	nop
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40010000 	.word	0x40010000
 8001094:	40023800 	.word	0x40023800
 8001098:	40000400 	.word	0x40000400
 800109c:	40000800 	.word	0x40000800
 80010a0:	40000c00 	.word	0x40000c00

080010a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08e      	sub	sp, #56	; 0x38
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a79      	ldr	r2, [pc, #484]	; (80012a8 <HAL_TIM_MspPostInit+0x204>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d11f      	bne.n	8001106 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
 80010ca:	4b78      	ldr	r3, [pc, #480]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a77      	ldr	r2, [pc, #476]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b75      	ldr	r3, [pc, #468]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80010e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	4619      	mov	r1, r3
 80010fe:	486c      	ldr	r0, [pc, #432]	; (80012b0 <HAL_TIM_MspPostInit+0x20c>)
 8001100:	f000 fac2 	bl	8001688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001104:	e0cc      	b.n	80012a0 <HAL_TIM_MspPostInit+0x1fc>
  else if(htim->Instance==TIM2)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110e:	d13d      	bne.n	800118c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	4b65      	ldr	r3, [pc, #404]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4a64      	ldr	r2, [pc, #400]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
 8001120:	4b62      	ldr	r3, [pc, #392]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a5d      	ldr	r2, [pc, #372]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001148:	2320      	movs	r3, #32
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001158:	2301      	movs	r3, #1
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	4853      	ldr	r0, [pc, #332]	; (80012b0 <HAL_TIM_MspPostInit+0x20c>)
 8001164:	f000 fa90 	bl	8001688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001168:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800117a:	2301      	movs	r3, #1
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	484b      	ldr	r0, [pc, #300]	; (80012b4 <HAL_TIM_MspPostInit+0x210>)
 8001186:	f000 fa7f 	bl	8001688 <HAL_GPIO_Init>
}
 800118a:	e089      	b.n	80012a0 <HAL_TIM_MspPostInit+0x1fc>
  else if(htim->Instance==TIM3)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a49      	ldr	r2, [pc, #292]	; (80012b8 <HAL_TIM_MspPostInit+0x214>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d13c      	bne.n	8001210 <HAL_TIM_MspPostInit+0x16c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	4b44      	ldr	r3, [pc, #272]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a43      	ldr	r2, [pc, #268]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b3d      	ldr	r3, [pc, #244]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a3c      	ldr	r2, [pc, #240]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b3a      	ldr	r3, [pc, #232]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ce:	23c0      	movs	r3, #192	; 0xc0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011de:	2302      	movs	r3, #2
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	4619      	mov	r1, r3
 80011e8:	4831      	ldr	r0, [pc, #196]	; (80012b0 <HAL_TIM_MspPostInit+0x20c>)
 80011ea:	f000 fa4d 	bl	8001688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ee:	2301      	movs	r3, #1
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011fe:	2302      	movs	r3, #2
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	482a      	ldr	r0, [pc, #168]	; (80012b4 <HAL_TIM_MspPostInit+0x210>)
 800120a:	f000 fa3d 	bl	8001688 <HAL_GPIO_Init>
}
 800120e:	e047      	b.n	80012a0 <HAL_TIM_MspPostInit+0x1fc>
  else if(htim->Instance==TIM4)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a29      	ldr	r2, [pc, #164]	; (80012bc <HAL_TIM_MspPostInit+0x218>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d11f      	bne.n	800125a <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a22      	ldr	r2, [pc, #136]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001236:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001248:	2302      	movs	r3, #2
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <HAL_TIM_MspPostInit+0x210>)
 8001254:	f000 fa18 	bl	8001688 <HAL_GPIO_Init>
}
 8001258:	e022      	b.n	80012a0 <HAL_TIM_MspPostInit+0x1fc>
  else if(htim->Instance==TIM5)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <HAL_TIM_MspPostInit+0x21c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d11d      	bne.n	80012a0 <HAL_TIM_MspPostInit+0x1fc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6313      	str	r3, [r2, #48]	; 0x30
 8001274:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_TIM_MspPostInit+0x208>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001280:	2307      	movs	r3, #7
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001290:	2302      	movs	r3, #2
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_TIM_MspPostInit+0x20c>)
 800129c:	f000 f9f4 	bl	8001688 <HAL_GPIO_Init>
}
 80012a0:	bf00      	nop
 80012a2:	3738      	adds	r7, #56	; 0x38
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40010000 	.word	0x40010000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40000400 	.word	0x40000400
 80012bc:	40000800 	.word	0x40000800
 80012c0:	40000c00 	.word	0x40000c00

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001310:	f000 f890 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001374 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001342:	490e      	ldr	r1, [pc, #56]	; (800137c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001358:	4c0b      	ldr	r4, [pc, #44]	; (8001388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001366:	f7ff ffd7 	bl	8001318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136a:	f001 fda3 	bl	8002eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff fa1f 	bl	80007b0 <main>
  bx  lr    
 8001372:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001374:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001380:	08002f44 	.word	0x08002f44
  ldr r2, =_sbss
 8001384:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001388:	200001bc 	.word	0x200001bc

0800138c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <HAL_Init+0x40>)
 800139a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_Init+0x40>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_Init+0x40>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 f931 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013be:	200f      	movs	r0, #15
 80013c0:	f000 f808 	bl	80013d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c4:	f7ff fdce 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x54>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_InitTick+0x58>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f93b 	bl	800166e <HAL_SYSTICK_Config>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e00e      	b.n	8001420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d80a      	bhi.n	800141e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001410:	f000 f911 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <HAL_InitTick+0x5c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000000 	.word	0x20000000
 800142c:	20000008 	.word	0x20000008
 8001430:	20000004 	.word	0x20000004

08001434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x20>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x24>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <HAL_IncTick+0x24>)
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008
 8001458:	200001b8 	.word	0x200001b8

0800145c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_GetTick+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	200001b8 	.word	0x200001b8

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff ffee 	bl	800145c <HAL_GetTick>
 8001480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800148c:	d005      	beq.n	800149a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_Delay+0x44>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800149a:	bf00      	nop
 800149c:	f7ff ffde 	bl	800145c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f7      	bhi.n	800149c <HAL_Delay+0x28>
  {
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff47 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff5c 	bl	8001504 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff8e 	bl	8001574 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5d 	bl	8001520 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffb0 	bl	80015dc <SysTick_Config>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	e159      	b.n	8001958 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016a4:	2201      	movs	r2, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	429a      	cmp	r2, r3
 80016be:	f040 8148 	bne.w	8001952 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d005      	beq.n	80016da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d130      	bne.n	800173c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001710:	2201      	movs	r2, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	f003 0201 	and.w	r2, r3, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b03      	cmp	r3, #3
 8001746:	d017      	beq.n	8001778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d123      	bne.n	80017cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	08da      	lsrs	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3208      	adds	r2, #8
 800178c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	220f      	movs	r2, #15
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	08da      	lsrs	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3208      	adds	r2, #8
 80017c6:	69b9      	ldr	r1, [r7, #24]
 80017c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0203 	and.w	r2, r3, #3
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a2 	beq.w	8001952 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b57      	ldr	r3, [pc, #348]	; (8001970 <HAL_GPIO_Init+0x2e8>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a56      	ldr	r2, [pc, #344]	; (8001970 <HAL_GPIO_Init+0x2e8>)
 8001818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800181c:	6453      	str	r3, [r2, #68]	; 0x44
 800181e:	4b54      	ldr	r3, [pc, #336]	; (8001970 <HAL_GPIO_Init+0x2e8>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800182a:	4a52      	ldr	r2, [pc, #328]	; (8001974 <HAL_GPIO_Init+0x2ec>)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	220f      	movs	r2, #15
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a49      	ldr	r2, [pc, #292]	; (8001978 <HAL_GPIO_Init+0x2f0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d019      	beq.n	800188a <HAL_GPIO_Init+0x202>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a48      	ldr	r2, [pc, #288]	; (800197c <HAL_GPIO_Init+0x2f4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_Init+0x1fe>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a47      	ldr	r2, [pc, #284]	; (8001980 <HAL_GPIO_Init+0x2f8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_Init+0x1fa>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a46      	ldr	r2, [pc, #280]	; (8001984 <HAL_GPIO_Init+0x2fc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x1f6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a45      	ldr	r2, [pc, #276]	; (8001988 <HAL_GPIO_Init+0x300>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_Init+0x1f2>
 8001876:	2304      	movs	r3, #4
 8001878:	e008      	b.n	800188c <HAL_GPIO_Init+0x204>
 800187a:	2307      	movs	r3, #7
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x204>
 800187e:	2303      	movs	r3, #3
 8001880:	e004      	b.n	800188c <HAL_GPIO_Init+0x204>
 8001882:	2302      	movs	r3, #2
 8001884:	e002      	b.n	800188c <HAL_GPIO_Init+0x204>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_GPIO_Init+0x204>
 800188a:	2300      	movs	r3, #0
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	f002 0203 	and.w	r2, r2, #3
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	4093      	lsls	r3, r2
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800189c:	4935      	ldr	r1, [pc, #212]	; (8001974 <HAL_GPIO_Init+0x2ec>)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_GPIO_Init+0x304>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ce:	4a2f      	ldr	r2, [pc, #188]	; (800198c <HAL_GPIO_Init+0x304>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d4:	4b2d      	ldr	r3, [pc, #180]	; (800198c <HAL_GPIO_Init+0x304>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f8:	4a24      	ldr	r2, [pc, #144]	; (800198c <HAL_GPIO_Init+0x304>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018fe:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_GPIO_Init+0x304>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001922:	4a1a      	ldr	r2, [pc, #104]	; (800198c <HAL_GPIO_Init+0x304>)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_GPIO_Init+0x304>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800194c:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_GPIO_Init+0x304>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3301      	adds	r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	2b0f      	cmp	r3, #15
 800195c:	f67f aea2 	bls.w	80016a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40013800 	.word	0x40013800
 8001978:	40020000 	.word	0x40020000
 800197c:	40020400 	.word	0x40020400
 8001980:	40020800 	.word	0x40020800
 8001984:	40020c00 	.word	0x40020c00
 8001988:	40021000 	.word	0x40021000
 800198c:	40013c00 	.word	0x40013c00

08001990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e267      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d075      	beq.n	8001a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ae:	4b88      	ldr	r3, [pc, #544]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d00c      	beq.n	80019d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ba:	4b85      	ldr	r3, [pc, #532]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d112      	bne.n	80019ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c6:	4b82      	ldr	r3, [pc, #520]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019d2:	d10b      	bne.n	80019ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	4b7e      	ldr	r3, [pc, #504]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d05b      	beq.n	8001a98 <HAL_RCC_OscConfig+0x108>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d157      	bne.n	8001a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e242      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f4:	d106      	bne.n	8001a04 <HAL_RCC_OscConfig+0x74>
 80019f6:	4b76      	ldr	r3, [pc, #472]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a75      	ldr	r2, [pc, #468]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e01d      	b.n	8001a40 <HAL_RCC_OscConfig+0xb0>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x98>
 8001a0e:	4b70      	ldr	r3, [pc, #448]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a6f      	ldr	r2, [pc, #444]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	4b6d      	ldr	r3, [pc, #436]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a6c      	ldr	r2, [pc, #432]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e00b      	b.n	8001a40 <HAL_RCC_OscConfig+0xb0>
 8001a28:	4b69      	ldr	r3, [pc, #420]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a68      	ldr	r2, [pc, #416]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b66      	ldr	r3, [pc, #408]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a65      	ldr	r2, [pc, #404]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d013      	beq.n	8001a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fd08 	bl	800145c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fd04 	bl	800145c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e207      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	4b5b      	ldr	r3, [pc, #364]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0xc0>
 8001a6e:	e014      	b.n	8001a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fcf4 	bl	800145c <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff fcf0 	bl	800145c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e1f3      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	4b51      	ldr	r3, [pc, #324]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0xe8>
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d063      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aa6:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00b      	beq.n	8001aca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d11c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d116      	bne.n	8001af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x152>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e1c7      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4937      	ldr	r1, [pc, #220]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	e03a      	b.n	8001b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d020      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_RCC_OscConfig+0x244>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff fca9 	bl	800145c <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff fca5 	bl	800145c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e1a8      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4925      	ldr	r1, [pc, #148]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]
 8001b40:	e015      	b.n	8001b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <HAL_RCC_OscConfig+0x244>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff fc88 	bl	800145c <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff fc84 	bl	800145c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e187      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d036      	beq.n	8001be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d016      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_RCC_OscConfig+0x248>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff fc68 	bl	800145c <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b90:	f7ff fc64 	bl	800145c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e167      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x200>
 8001bae:	e01b      	b.n	8001be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_OscConfig+0x248>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fc51 	bl	800145c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	e00e      	b.n	8001bdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff fc4d 	bl	800145c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d907      	bls.n	8001bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e150      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	42470000 	.word	0x42470000
 8001bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	4b88      	ldr	r3, [pc, #544]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ea      	bne.n	8001bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8097 	beq.w	8001d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfa:	4b81      	ldr	r3, [pc, #516]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10f      	bne.n	8001c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	4b7d      	ldr	r3, [pc, #500]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a7c      	ldr	r2, [pc, #496]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b7a      	ldr	r3, [pc, #488]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c22:	2301      	movs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b77      	ldr	r3, [pc, #476]	; (8001e04 <HAL_RCC_OscConfig+0x474>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d118      	bne.n	8001c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c32:	4b74      	ldr	r3, [pc, #464]	; (8001e04 <HAL_RCC_OscConfig+0x474>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a73      	ldr	r2, [pc, #460]	; (8001e04 <HAL_RCC_OscConfig+0x474>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff fc0d 	bl	800145c <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c46:	f7ff fc09 	bl	800145c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e10c      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x474>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x2ea>
 8001c6c:	4b64      	ldr	r3, [pc, #400]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a63      	ldr	r2, [pc, #396]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70
 8001c78:	e01c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x324>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x30c>
 8001c82:	4b5f      	ldr	r3, [pc, #380]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	4a5e      	ldr	r2, [pc, #376]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8e:	4b5c      	ldr	r3, [pc, #368]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	4a5b      	ldr	r2, [pc, #364]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x324>
 8001c9c:	4b58      	ldr	r3, [pc, #352]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	4a57      	ldr	r2, [pc, #348]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca8:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	4a54      	ldr	r2, [pc, #336]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001cae:	f023 0304 	bic.w	r3, r3, #4
 8001cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d015      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fbce 	bl	800145c <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fbca 	bl	800145c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0cb      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cda:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0ee      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x334>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce8:	f7ff fbb8 	bl	800145c <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fbb4 	bl	800145c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e0b5      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d06:	4b3e      	ldr	r3, [pc, #248]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ee      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d105      	bne.n	8001d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d18:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a38      	ldr	r2, [pc, #224]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80a1 	beq.w	8001e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d2e:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d05c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d141      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d42:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <HAL_RCC_OscConfig+0x478>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fb88 	bl	800145c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d50:	f7ff fb84 	bl	800145c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e087      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d62:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69da      	ldr	r2, [r3, #28]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	019b      	lsls	r3, r3, #6
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	3b01      	subs	r3, #1
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	061b      	lsls	r3, r3, #24
 8001d92:	491b      	ldr	r1, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_RCC_OscConfig+0x478>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fb5d 	bl	800145c <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da6:	f7ff fb59 	bl	800145c <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e05c      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x416>
 8001dc4:	e054      	b.n	8001e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_RCC_OscConfig+0x478>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fb46 	bl	800145c <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7ff fb42 	bl	800145c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e045      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x444>
 8001df2:	e03d      	b.n	8001e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e038      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40007000 	.word	0x40007000
 8001e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x4ec>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d028      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d121      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d11a      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d111      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	3b01      	subs	r3, #1
 8001e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0cc      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e94:	4b68      	ldr	r3, [pc, #416]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d90c      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b65      	ldr	r3, [pc, #404]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b63      	ldr	r3, [pc, #396]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0b8      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed4:	4b59      	ldr	r3, [pc, #356]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eec:	4b53      	ldr	r3, [pc, #332]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef8:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	494d      	ldr	r1, [pc, #308]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d044      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d119      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e07f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e06f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e067      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f023 0203 	bic.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4934      	ldr	r1, [pc, #208]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f70:	f7ff fa74 	bl	800145c <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f78:	f7ff fa70 	bl	800145c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e04f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 020c 	and.w	r2, r3, #12
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1eb      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b25      	ldr	r3, [pc, #148]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d20c      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e032      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4916      	ldr	r1, [pc, #88]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	490e      	ldr	r1, [pc, #56]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002006:	f000 f821 	bl	800204c <HAL_RCC_GetSysClockFreq>
 800200a:	4602      	mov	r2, r0
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	490a      	ldr	r1, [pc, #40]	; (8002040 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	5ccb      	ldrb	r3, [r1, r3]
 800201a:	fa22 f303 	lsr.w	r3, r2, r3
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f9d4 	bl	80013d4 <HAL_InitTick>

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023c00 	.word	0x40023c00
 800203c:	40023800 	.word	0x40023800
 8002040:	08002f24 	.word	0x08002f24
 8002044:	20000000 	.word	0x20000000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002050:	b090      	sub	sp, #64	; 0x40
 8002052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
 8002058:	2300      	movs	r3, #0
 800205a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800205c:	2300      	movs	r3, #0
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002064:	4b59      	ldr	r3, [pc, #356]	; (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	d00d      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x40>
 8002070:	2b08      	cmp	r3, #8
 8002072:	f200 80a1 	bhi.w	80021b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x34>
 800207a:	2b04      	cmp	r3, #4
 800207c:	d003      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x3a>
 800207e:	e09b      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002082:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002084:	e09b      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002086:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002088:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800208a:	e098      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800208c:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002094:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002096:	4b4d      	ldr	r3, [pc, #308]	; (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d028      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a2:	4b4a      	ldr	r3, [pc, #296]	; (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	099b      	lsrs	r3, r3, #6
 80020a8:	2200      	movs	r2, #0
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	627a      	str	r2, [r7, #36]	; 0x24
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020b4:	2100      	movs	r1, #0
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020b8:	fb03 f201 	mul.w	r2, r3, r1
 80020bc:	2300      	movs	r3, #0
 80020be:	fb00 f303 	mul.w	r3, r0, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	4a43      	ldr	r2, [pc, #268]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020c6:	fba0 1202 	umull	r1, r2, r0, r2
 80020ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020cc:	460a      	mov	r2, r1
 80020ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80020d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d2:	4413      	add	r3, r2
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d8:	2200      	movs	r2, #0
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	61fa      	str	r2, [r7, #28]
 80020de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020e6:	f7fe f875 	bl	80001d4 <__aeabi_uldivmod>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4613      	mov	r3, r2
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f2:	e053      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f4:	4b35      	ldr	r3, [pc, #212]	; (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	2200      	movs	r2, #0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	617a      	str	r2, [r7, #20]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002106:	f04f 0b00 	mov.w	fp, #0
 800210a:	4652      	mov	r2, sl
 800210c:	465b      	mov	r3, fp
 800210e:	f04f 0000 	mov.w	r0, #0
 8002112:	f04f 0100 	mov.w	r1, #0
 8002116:	0159      	lsls	r1, r3, #5
 8002118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800211c:	0150      	lsls	r0, r2, #5
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	ebb2 080a 	subs.w	r8, r2, sl
 8002126:	eb63 090b 	sbc.w	r9, r3, fp
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002136:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800213a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800213e:	ebb2 0408 	subs.w	r4, r2, r8
 8002142:	eb63 0509 	sbc.w	r5, r3, r9
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	00eb      	lsls	r3, r5, #3
 8002150:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002154:	00e2      	lsls	r2, r4, #3
 8002156:	4614      	mov	r4, r2
 8002158:	461d      	mov	r5, r3
 800215a:	eb14 030a 	adds.w	r3, r4, sl
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	eb45 030b 	adc.w	r3, r5, fp
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002172:	4629      	mov	r1, r5
 8002174:	028b      	lsls	r3, r1, #10
 8002176:	4621      	mov	r1, r4
 8002178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800217c:	4621      	mov	r1, r4
 800217e:	028a      	lsls	r2, r1, #10
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002186:	2200      	movs	r2, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	60fa      	str	r2, [r7, #12]
 800218c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002190:	f7fe f820 	bl	80001d4 <__aeabi_uldivmod>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4613      	mov	r3, r2
 800219a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	3301      	adds	r3, #1
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80021ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021b6:	e002      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80021ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3740      	adds	r7, #64	; 0x40
 80021c4:	46bd      	mov	sp, r7
 80021c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	00f42400 	.word	0x00f42400
 80021d4:	017d7840 	.word	0x017d7840

080021d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e041      	b.n	800226e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe fed8 	bl	8000fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3304      	adds	r3, #4
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f000 fac0 	bl	800279c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e041      	b.n	800230c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f839 	bl	8002314 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3304      	adds	r3, #4
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f000 fa71 	bl	800279c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_TIM_PWM_Start+0x24>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b01      	cmp	r3, #1
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e022      	b.n	8002392 <HAL_TIM_PWM_Start+0x6a>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b04      	cmp	r3, #4
 8002350:	d109      	bne.n	8002366 <HAL_TIM_PWM_Start+0x3e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b01      	cmp	r3, #1
 800235c:	bf14      	ite	ne
 800235e:	2301      	movne	r3, #1
 8002360:	2300      	moveq	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	e015      	b.n	8002392 <HAL_TIM_PWM_Start+0x6a>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b08      	cmp	r3, #8
 800236a:	d109      	bne.n	8002380 <HAL_TIM_PWM_Start+0x58>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	bf14      	ite	ne
 8002378:	2301      	movne	r3, #1
 800237a:	2300      	moveq	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	e008      	b.n	8002392 <HAL_TIM_PWM_Start+0x6a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	bf14      	ite	ne
 800238c:	2301      	movne	r3, #1
 800238e:	2300      	moveq	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e068      	b.n	800246c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d104      	bne.n	80023aa <HAL_TIM_PWM_Start+0x82>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023a8:	e013      	b.n	80023d2 <HAL_TIM_PWM_Start+0xaa>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d104      	bne.n	80023ba <HAL_TIM_PWM_Start+0x92>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b8:	e00b      	b.n	80023d2 <HAL_TIM_PWM_Start+0xaa>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d104      	bne.n	80023ca <HAL_TIM_PWM_Start+0xa2>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c8:	e003      	b.n	80023d2 <HAL_TIM_PWM_Start+0xaa>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2201      	movs	r2, #1
 80023d8:	6839      	ldr	r1, [r7, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fc84 	bl	8002ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <HAL_TIM_PWM_Start+0x14c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d107      	bne.n	80023fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <HAL_TIM_PWM_Start+0x14c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d018      	beq.n	8002436 <HAL_TIM_PWM_Start+0x10e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240c:	d013      	beq.n	8002436 <HAL_TIM_PWM_Start+0x10e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a19      	ldr	r2, [pc, #100]	; (8002478 <HAL_TIM_PWM_Start+0x150>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00e      	beq.n	8002436 <HAL_TIM_PWM_Start+0x10e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a17      	ldr	r2, [pc, #92]	; (800247c <HAL_TIM_PWM_Start+0x154>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d009      	beq.n	8002436 <HAL_TIM_PWM_Start+0x10e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a16      	ldr	r2, [pc, #88]	; (8002480 <HAL_TIM_PWM_Start+0x158>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d004      	beq.n	8002436 <HAL_TIM_PWM_Start+0x10e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_TIM_PWM_Start+0x15c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d111      	bne.n	800245a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b06      	cmp	r3, #6
 8002446:	d010      	beq.n	800246a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002458:	e007      	b.n	800246a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40010000 	.word	0x40010000
 8002478:	40000400 	.word	0x40000400
 800247c:	40000800 	.word	0x40000800
 8002480:	40000c00 	.word	0x40000c00
 8002484:	40014000 	.word	0x40014000

08002488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e0ae      	b.n	8002604 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	f200 809f 	bhi.w	80025f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80024b6:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	080025f5 	.word	0x080025f5
 80024c4:	080025f5 	.word	0x080025f5
 80024c8:	080025f5 	.word	0x080025f5
 80024cc:	08002531 	.word	0x08002531
 80024d0:	080025f5 	.word	0x080025f5
 80024d4:	080025f5 	.word	0x080025f5
 80024d8:	080025f5 	.word	0x080025f5
 80024dc:	08002573 	.word	0x08002573
 80024e0:	080025f5 	.word	0x080025f5
 80024e4:	080025f5 	.word	0x080025f5
 80024e8:	080025f5 	.word	0x080025f5
 80024ec:	080025b3 	.word	0x080025b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f9d0 	bl	800289c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0208 	orr.w	r2, r2, #8
 800250a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0204 	bic.w	r2, r2, #4
 800251a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6999      	ldr	r1, [r3, #24]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	619a      	str	r2, [r3, #24]
      break;
 800252e:	e064      	b.n	80025fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fa16 	bl	8002968 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6999      	ldr	r1, [r3, #24]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	021a      	lsls	r2, r3, #8
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	619a      	str	r2, [r3, #24]
      break;
 8002570:	e043      	b.n	80025fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fa61 	bl	8002a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0208 	orr.w	r2, r2, #8
 800258c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0204 	bic.w	r2, r2, #4
 800259c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69d9      	ldr	r1, [r3, #28]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	61da      	str	r2, [r3, #28]
      break;
 80025b0:	e023      	b.n	80025fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 faab 	bl	8002b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69d9      	ldr	r1, [r3, #28]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	021a      	lsls	r2, r3, #8
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	61da      	str	r2, [r3, #28]
      break;
 80025f2:	e002      	b.n	80025fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	75fb      	strb	r3, [r7, #23]
      break;
 80025f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002602:	7dfb      	ldrb	r3, [r7, #23]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_TIM_ConfigClockSource+0x1c>
 8002624:	2302      	movs	r3, #2
 8002626:	e0b4      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x186>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800264e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002660:	d03e      	beq.n	80026e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002666:	f200 8087 	bhi.w	8002778 <HAL_TIM_ConfigClockSource+0x16c>
 800266a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266e:	f000 8086 	beq.w	800277e <HAL_TIM_ConfigClockSource+0x172>
 8002672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002676:	d87f      	bhi.n	8002778 <HAL_TIM_ConfigClockSource+0x16c>
 8002678:	2b70      	cmp	r3, #112	; 0x70
 800267a:	d01a      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0xa6>
 800267c:	2b70      	cmp	r3, #112	; 0x70
 800267e:	d87b      	bhi.n	8002778 <HAL_TIM_ConfigClockSource+0x16c>
 8002680:	2b60      	cmp	r3, #96	; 0x60
 8002682:	d050      	beq.n	8002726 <HAL_TIM_ConfigClockSource+0x11a>
 8002684:	2b60      	cmp	r3, #96	; 0x60
 8002686:	d877      	bhi.n	8002778 <HAL_TIM_ConfigClockSource+0x16c>
 8002688:	2b50      	cmp	r3, #80	; 0x50
 800268a:	d03c      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0xfa>
 800268c:	2b50      	cmp	r3, #80	; 0x50
 800268e:	d873      	bhi.n	8002778 <HAL_TIM_ConfigClockSource+0x16c>
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d058      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0x13a>
 8002694:	2b40      	cmp	r3, #64	; 0x40
 8002696:	d86f      	bhi.n	8002778 <HAL_TIM_ConfigClockSource+0x16c>
 8002698:	2b30      	cmp	r3, #48	; 0x30
 800269a:	d064      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x15a>
 800269c:	2b30      	cmp	r3, #48	; 0x30
 800269e:	d86b      	bhi.n	8002778 <HAL_TIM_ConfigClockSource+0x16c>
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d060      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x15a>
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d867      	bhi.n	8002778 <HAL_TIM_ConfigClockSource+0x16c>
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d05c      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x15a>
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d05a      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x15a>
 80026b0:	e062      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6899      	ldr	r1, [r3, #8]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f000 faf1 	bl	8002ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	609a      	str	r2, [r3, #8]
      break;
 80026de:	e04f      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6899      	ldr	r1, [r3, #8]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f000 fada 	bl	8002ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002702:	609a      	str	r2, [r3, #8]
      break;
 8002704:	e03c      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	6859      	ldr	r1, [r3, #4]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	461a      	mov	r2, r3
 8002714:	f000 fa4e 	bl	8002bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2150      	movs	r1, #80	; 0x50
 800271e:	4618      	mov	r0, r3
 8002720:	f000 faa7 	bl	8002c72 <TIM_ITRx_SetConfig>
      break;
 8002724:	e02c      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	461a      	mov	r2, r3
 8002734:	f000 fa6d 	bl	8002c12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2160      	movs	r1, #96	; 0x60
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fa97 	bl	8002c72 <TIM_ITRx_SetConfig>
      break;
 8002744:	e01c      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	461a      	mov	r2, r3
 8002754:	f000 fa2e 	bl	8002bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2140      	movs	r1, #64	; 0x40
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fa87 	bl	8002c72 <TIM_ITRx_SetConfig>
      break;
 8002764:	e00c      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f000 fa7e 	bl	8002c72 <TIM_ITRx_SetConfig>
      break;
 8002776:	e003      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      break;
 800277c:	e000      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800277e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a34      	ldr	r2, [pc, #208]	; (8002880 <TIM_Base_SetConfig+0xe4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00f      	beq.n	80027d4 <TIM_Base_SetConfig+0x38>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ba:	d00b      	beq.n	80027d4 <TIM_Base_SetConfig+0x38>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a31      	ldr	r2, [pc, #196]	; (8002884 <TIM_Base_SetConfig+0xe8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d007      	beq.n	80027d4 <TIM_Base_SetConfig+0x38>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a30      	ldr	r2, [pc, #192]	; (8002888 <TIM_Base_SetConfig+0xec>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d003      	beq.n	80027d4 <TIM_Base_SetConfig+0x38>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a2f      	ldr	r2, [pc, #188]	; (800288c <TIM_Base_SetConfig+0xf0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d108      	bne.n	80027e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a25      	ldr	r2, [pc, #148]	; (8002880 <TIM_Base_SetConfig+0xe4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01b      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d017      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a22      	ldr	r2, [pc, #136]	; (8002884 <TIM_Base_SetConfig+0xe8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a21      	ldr	r2, [pc, #132]	; (8002888 <TIM_Base_SetConfig+0xec>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00f      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a20      	ldr	r2, [pc, #128]	; (800288c <TIM_Base_SetConfig+0xf0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00b      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <TIM_Base_SetConfig+0xf4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d007      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <TIM_Base_SetConfig+0xf8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d003      	beq.n	8002826 <TIM_Base_SetConfig+0x8a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <TIM_Base_SetConfig+0xfc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d108      	bne.n	8002838 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800282c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <TIM_Base_SetConfig+0xe4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d103      	bne.n	800286c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	615a      	str	r2, [r3, #20]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40010000 	.word	0x40010000
 8002884:	40000400 	.word	0x40000400
 8002888:	40000800 	.word	0x40000800
 800288c:	40000c00 	.word	0x40000c00
 8002890:	40014000 	.word	0x40014000
 8002894:	40014400 	.word	0x40014400
 8002898:	40014800 	.word	0x40014800

0800289c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	f023 0201 	bic.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 0302 	bic.w	r3, r3, #2
 80028e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <TIM_OC1_SetConfig+0xc8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d10c      	bne.n	8002912 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f023 0308 	bic.w	r3, r3, #8
 80028fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <TIM_OC1_SetConfig+0xc8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d111      	bne.n	800293e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	621a      	str	r2, [r3, #32]
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	40010000 	.word	0x40010000

08002968 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f023 0210 	bic.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f023 0320 	bic.w	r3, r3, #32
 80029b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <TIM_OC2_SetConfig+0xd4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10d      	bne.n	80029e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a15      	ldr	r2, [pc, #84]	; (8002a3c <TIM_OC2_SetConfig+0xd4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d113      	bne.n	8002a14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40010000 	.word	0x40010000

08002a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0303 	bic.w	r3, r3, #3
 8002a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <TIM_OC3_SetConfig+0xd0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10d      	bne.n	8002aba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <TIM_OC3_SetConfig+0xd0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d113      	bne.n	8002aea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	621a      	str	r2, [r3, #32]
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40010000 	.word	0x40010000

08002b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	031b      	lsls	r3, r3, #12
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <TIM_OC4_SetConfig+0x9c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d109      	bne.n	8002b88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	019b      	lsls	r3, r3, #6
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	621a      	str	r2, [r3, #32]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40010000 	.word	0x40010000

08002bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f023 0201 	bic.w	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f023 030a 	bic.w	r3, r3, #10
 8002bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	621a      	str	r2, [r3, #32]
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b087      	sub	sp, #28
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	f023 0210 	bic.w	r2, r3, #16
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	031b      	lsls	r3, r3, #12
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	621a      	str	r2, [r3, #32]
}
 8002c66:	bf00      	nop
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b085      	sub	sp, #20
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f043 0307 	orr.w	r3, r3, #7
 8002c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	609a      	str	r2, [r3, #8]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	021a      	lsls	r2, r3, #8
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	609a      	str	r2, [r3, #8]
}
 8002cdc:	bf00      	nop
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1a      	ldr	r2, [r3, #32]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e050      	b.n	8002dee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d018      	beq.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d98:	d013      	beq.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00e      	beq.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a16      	ldr	r2, [pc, #88]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d009      	beq.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a15      	ldr	r2, [pc, #84]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d004      	beq.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a13      	ldr	r2, [pc, #76]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d10c      	bne.n	8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40000800 	.word	0x40000800
 8002e08:	40000c00 	.word	0x40000c00
 8002e0c:	40014000 	.word	0x40014000

08002e10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e03d      	b.n	8002ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <__libc_init_array>:
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	4d0d      	ldr	r5, [pc, #52]	; (8002eec <__libc_init_array+0x38>)
 8002eb8:	4c0d      	ldr	r4, [pc, #52]	; (8002ef0 <__libc_init_array+0x3c>)
 8002eba:	1b64      	subs	r4, r4, r5
 8002ebc:	10a4      	asrs	r4, r4, #2
 8002ebe:	2600      	movs	r6, #0
 8002ec0:	42a6      	cmp	r6, r4
 8002ec2:	d109      	bne.n	8002ed8 <__libc_init_array+0x24>
 8002ec4:	4d0b      	ldr	r5, [pc, #44]	; (8002ef4 <__libc_init_array+0x40>)
 8002ec6:	4c0c      	ldr	r4, [pc, #48]	; (8002ef8 <__libc_init_array+0x44>)
 8002ec8:	f000 f820 	bl	8002f0c <_init>
 8002ecc:	1b64      	subs	r4, r4, r5
 8002ece:	10a4      	asrs	r4, r4, #2
 8002ed0:	2600      	movs	r6, #0
 8002ed2:	42a6      	cmp	r6, r4
 8002ed4:	d105      	bne.n	8002ee2 <__libc_init_array+0x2e>
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
 8002ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002edc:	4798      	blx	r3
 8002ede:	3601      	adds	r6, #1
 8002ee0:	e7ee      	b.n	8002ec0 <__libc_init_array+0xc>
 8002ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee6:	4798      	blx	r3
 8002ee8:	3601      	adds	r6, #1
 8002eea:	e7f2      	b.n	8002ed2 <__libc_init_array+0x1e>
 8002eec:	08002f3c 	.word	0x08002f3c
 8002ef0:	08002f3c 	.word	0x08002f3c
 8002ef4:	08002f3c 	.word	0x08002f3c
 8002ef8:	08002f40 	.word	0x08002f40

08002efc <memset>:
 8002efc:	4402      	add	r2, r0
 8002efe:	4603      	mov	r3, r0
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d100      	bne.n	8002f06 <memset+0xa>
 8002f04:	4770      	bx	lr
 8002f06:	f803 1b01 	strb.w	r1, [r3], #1
 8002f0a:	e7f9      	b.n	8002f00 <memset+0x4>

08002f0c <_init>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	bf00      	nop
 8002f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f12:	bc08      	pop	{r3}
 8002f14:	469e      	mov	lr, r3
 8002f16:	4770      	bx	lr

08002f18 <_fini>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	bf00      	nop
 8002f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1e:	bc08      	pop	{r3}
 8002f20:	469e      	mov	lr, r3
 8002f22:	4770      	bx	lr
